package main

// Code generated by github.com/andrewarrow/avdl_to_golang. DO NOT EDIT.


	import "strings"

	type Fields struct {
		stringFields []string
		floatFields  []string
		longFields   []string
	}
	type ValueFields struct {
		stringFields []string
		floatFields  []float32
		longFields   []int64
		name         string
	}


	func newFields(m map[string]string) Fields {
		f := Fields{}
		if m["strings"] != "" {
			for _, s := range strings.Split(m["strings"], ",") {
				f.stringFields = append(f.stringFields, s)
			}
		}
		if m["floats"] != "" {
			for _, s := range strings.Split(m["floats"], ",") {
				f.floatFields = append(f.floatFields, s)
			}
		}
		if m["longs"] != "" {
			for _, s := range strings.Split(m["longs"], ",") {
				f.longFields = append(f.longFields, s)
			}
		}
		return f
	}
	var schema map[string]Fields = map[string]Fields{"OtherThing": newFields(map[string]string{"strings": "flavor,other_name", "floats": "latitude,longitude", "longs": "time_now,time_then"}),
"Thing": newFields(map[string]string{"strings": "flavor", "floats": "version", "longs": "ip"}),
}


type OtherThing struct {
  Flavor string
  Other_name string
  Latitude float32
  Longitude float32
  Time_now int64
  Time_then int64
}
func (t OtherThing) ToFields() ValueFields {
  f := ValueFields{}
  f.name = "OtherThing"
  f.stringFields = []string{t.Flavor,t.Other_name}
  f.floatFields = []float32{t.Latitude,t.Longitude}
  f.longFields = []int64{t.Time_now,t.Time_then}
  return f
}



type Thing struct {
  Flavor string
  Version float32
  Ip int64
}
func (t Thing) ToFields() ValueFields {
  f := ValueFields{}
  f.name = "Thing"
  f.stringFields = []string{t.Flavor}
  f.floatFields = []float32{t.Version}
  f.longFields = []int64{t.Ip}
  return f
}
